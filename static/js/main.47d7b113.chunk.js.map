{"version":3,"sources":["Components/CounterButton.js","Components/Header.js","Components/Card.js","Components/CardList.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["CounterButton","updateCount","setState","state","count","nextProps","nextState","this","style","margin","padding","color","props","onClick","Component","Header","className","Card","name","email","id","alt","src","CardList","robots","map","robot","i","key","Searchbox","searhcChange","aria-label","onChange","type","placeholder","Scroll","overflowY","border","height","children","ErrorBoundry","hasError","error","info","App","console","log","OnRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLocaleLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","e","payload","target","value","fetch","then","r","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initalStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.47d7b113.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n       if(this.state.count !== nextState.count) {\r\n           return true;\r\n       }\r\n\r\n       return false;\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {count: this.state.count + 1}\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <button style={{margin: \"1rem\", padding: \"1rem\"}}color={this.props.color} onClick={this.updateCount}>\r\n            Count: {this.state.count}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((robot, i) => {\r\n          return (\r\n            <Card \r\n              key={i} \r\n              id={robot.id} \r\n              name={robot.name} \r\n              email={robot.email}\r\n              />\r\n            );\r\n            })\r\n        }        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({ searhcChange }) => {\r\n    return (\r\n      <div>\r\n        <input aria-label=\"Search Robot\" onChange={searhcChange} className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots'/>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height:'600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        return this.state.hasError ?\r\n          <h1>Ooops. that is not good</h1> :\r\n          this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\nimport {connect} from 'react-redux';\nimport './App.css';\nimport 'tachyons';\nimport Header from '../Components/Header';\nimport CardList from '../Components/CardList';\nimport Searchbox from '../Components/Searchbox';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundry from '../Components/ErrorBoundry';\nimport {setSearchField, requestRobots} from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending : state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (e) => dispatch(setSearchField(e.target.value)),\n    OnRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends React.Component {\n  \n  componentDidMount() {\n    console.log(this.props);\n    this.props.OnRequestRobots();\n  }\n\n  render() {\n    const {searchField, onSearchChange, robots, isPending} = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\n    });\n\n    return isPending ?\n       <h1>Loading</h1> :\n       (\n        <div className='tc'>\n          <Header />\n          <Searchbox searhcChange={onSearchChange}/>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      )\n   } \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({\r\n        type: REQUEST_ROBOTS_PENDING\r\n    });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(r => r.json())\r\n        .then(data => dispatch({\r\n            type: REQUEST_ROBOTS_SUCCESS,\r\n            payload: data\r\n        }))\r\n        .catch(err => dispatch({\r\n            type: REQUEST_ROBOTS_FAILED,\r\n            payload: err\r\n        }));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initalStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initalStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD: \r\n          return Object.assign({}, state, {searchField: action.payload});\r\n        default: \r\n          return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default:\r\n            return state;    \r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}